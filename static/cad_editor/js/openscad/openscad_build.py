#!/usr/bin/env python3  
"""
OpenSCAD JavaScript Build Script
Compiles OpenSCAD JavaScript files using Terser (local minification)
"""

import os
import subprocess
import sys
import shutil
from pathlib import Path


class OpenSCADBuilder:
    def __init__(self):
        self.script_dir = Path(__file__).parent
        self.js_files = {
            'openscad_compressed.js': [
                'osPage.js', 'storage.js', 'utils.js', 'openscad.js',
                'text.js', 'lightgl.js', 'deflate.js', 'stl.js'
            ],
            'viewer_compressed.js': [
                'viewer.js', 'csg.js', 'formats.js'
            ]
        }

    def check_terser(self):
        """Check if Terser is installed and available"""
        try:
            result = subprocess.run(['terser', '--version'],
                                    capture_output=True, text=True, check=True)
            print(f"✓ Terser found: {result.stdout.strip()}")

            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("✗ Terser not found")
            return False

    def install_terser(self):
        """Install Terser globally using npm"""
        print("Installing Terser globally...")
        try:
            subprocess.run(['npm', 'install', '-g', 'terser'], check=True)
            print("✓ Terser installed successfully")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("✗ Failed to install Terser. Make sure npm is installed.")
            return False

    def ensure_terser(self):
        """Ensure Terser is available, install if needed"""
        if self.check_terser():
            return True

        print("Terser is required for JavaScript compression.")
        install = input("Install Terser globally? (y/n): ").lower().strip()

        if install == 'y':
            return self.install_terser()
        else:
            print("Cannot proceed without Terser. Exiting.")
            return False

    def compile_files(self, output_file, input_files):
        """Compile JavaScript files using Terser"""
        print(f"\nCompiling {output_file}...")

        # Check if all input files exist
        missing_files = []
        for file in input_files:
            if not (self.script_dir / file).exists():
                missing_files.append(file)

        if missing_files:
            print(f"✗ Missing files: {', '.join(missing_files)}")
            return False

        # Build Terser command
        cmd = ['terser'] + input_files + [
            '--compress',
            '--mangle',
            '--output', output_file,
            '--comments', 'false'
        ]

        try:
            # Change to script directory for relative paths
            subprocess.run(cmd, cwd=self.script_dir,
                           capture_output=True, text=True, check=True)

            # Get file sizes for reporting
            input_size = sum((self.script_dir / f).stat().st_size for f in input_files)
            output_size = (self.script_dir / output_file).stat().st_size
            compression_ratio = (1 - output_size / input_size) * 100

            print(f"✓ {output_file} created successfully")
            print(f"  Original: {input_size:,} bytes")
            print(f"  Compressed: {output_size:,} bytes")
            print(f"  Compression: {compression_ratio:.1f}%")

            return True

        except subprocess.CalledProcessError as e:
            print(f"✗ Compilation failed for {output_file}")
            print(f"Error: {e.stderr}")
            return False

    def add_header(self, filename):
        """Add header comment to compressed file"""
        header = '// Do not edit this file; automatically generated by openscad_build.py.\n"use strict";\n'

        filepath = self.script_dir / filename
        if filepath.exists():
            with open(filepath, 'r') as f:
                content = f.read()

            with open(filepath, 'w') as f:
                f.write(header + content)

    def build_all(self):
        """Build all compressed JavaScript files"""
        print("OpenSCAD JavaScript Builder")
        print("=" * 40)

        # Ensure Terser is available
        if not self.ensure_terser():
            return False

        success = True

        # Compile each target
        for output_file, input_files in self.js_files.items():
            if self.compile_files(output_file, input_files):
                self.add_header(output_file)
            else:
                success = False

        if success:
            print(f"\n✓ All files compiled successfully!")
        else:
            print(f"\n✗ Some files failed to compile")

        return success


def main():
    """Main entry point"""
    builder = OpenSCADBuilder()

    # Change to the script's directory (should be in openscad folder)
    os.chdir(builder.script_dir)

    success = builder.build_all()
    sys.exit(0 if success else 1)


if __name__ == '__main__':
    main()
