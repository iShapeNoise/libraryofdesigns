"""
Django settings for lod project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
from decouple import Csv 
import os
import mimetypes
mimetypes.add_type("application/javascript", ".js", True)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Backup folder for lot_db database backup
PG_COPY_BACKUP_PATH = 'lod_db_backup/'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'conversation',
    'dashboard',
    'core',
    'design',
    'knowhow',
    'editor',
    'forum',
    'django_recaptcha',
    'pg_copy',
    'django_object_actions',
    'easy_thumbnails',
    'mptt',
    'multiupload',
    'taggit',
]

MIDDLEWARE = [
    'django.middleware.gzip.GZipMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'lod.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'lod.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': config('DB_ENGINE'),
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'PORT': config('DB_PORT'),
        'HOST': config('DB_HOST'),
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
        'LOCATION': config('MEMCACHED_LOCATION', default='127.0.0.1:11211'),
        'TIMEOUT': 300,  # 5 minutes default
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# ReCAPTCHA
RECAPTCHA_PUBLIC_KEY = '6LccJFIrAAAAAMLnj6heVaFWsQwU_xk2_OO7pxRn'
RECAPTCHA_PRIVATE_KEY = '6LccJFIrAAAAAGC1gAF7zBstJ5zl1-san2hesWOX'
SILENCED_SYSTEM_CHECKS = ['django_recaptcha.recaptcha_test_key_error']

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
# User profile media
MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
# Design content
LOD_CONTENT_URL = 'lod_content/'
LOD_CONTENT_ROOT = os.path.join(BASE_DIR, 'lod_content/')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.expanduser('~/django_debug.log'),
            'formatter': 'verbose',
            'mode': 'a',  # Append mode  
            'delay': False,  # Don't delay file opening  
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['file', 'console'],
        'level': 'DEBUG',
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
        'core': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'design': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'print_capture': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

if DEBUG:  # Only load and run in debug mode
    import sys
    import logging

    sys.stdout = sys.__stdout__  # Reset stdout first
    sys.stderr = sys.__stderr__  # Reset stderr first

    # Custom handler to capture print statements with immediate flushing
    class PrintCapture:
        def __init__(self, logger):
            self.logger = logger
            self.original_stdout = sys.stdout

        def write(self, message):
            if message.strip():  # Only log non-empty messages
                self.logger.info(f"PRINT: {message.strip()}")
                # Force immediate flush to ensure real-time logging
                for handler in self.logger.handlers:
                    handler.flush()
            self.original_stdout.write(message)

        def flush(self):
            self.original_stdout.flush()
            # Also flush all logger handlers
            for handler in logging.getLogger().handlers:
                handler.flush()

    # Set up print capture logger and redirect stdout
    print_logger = logging.getLogger('print_capture')
    sys.stdout = PrintCapture(print_logger)


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Easy Thumbnails
THUMBNAIL_ALIASES = {
    '': {
        'small_thumbnail': {'size': (128, 128), 'crop': 'smart'},
        'big_thumbnail': {'size': (256, 256), 'crop': 'smart'},
        'large_thumbnail': {'size': (512, 512), 'crop': 'smart'},
        'large_detail': {'size': (1024, 1024), 'quality': 90},
        'profile_avatar': {'size': (128, 128), 'crop': 'smart', 'quality': 95},
        'profile_avatar_mid': {'size': (64, 64), 'crop': 'smart', 'quality': 95},
        'profile_avatar_small': {'size': (32, 32), 'crop': 'smart', 'quality': 95},
    },
}
